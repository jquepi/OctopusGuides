name: Java Jenkins Kubernetes DockerHub Screenshots
on:
#  push:
  repository_dispatch:
  workflow_dispatch:
  schedule:
    - cron:  '0 0 5,20 * *'
jobs:
  build:
    if: >-
      (github.event_name != 'repository_dispatch') ||
      (github.event.client_payload.workflow == github.workflow) ||
      (github.event.client_payload.workflow == 'all') ||
      (github.event.client_payload.workflow == 'jenkins-nodejs-k8s-screenshots') ||
      (github.event.client_payload.workflow == 'jenkins')
    runs-on: ubuntu-20.04
    env:
      SLACK_STEP_HANDLER: true
      SLACK_ON_ERROR_ONLY: true
      STEP_PAUSE: 1000
      SLACK_HOOK_URL: ${{ secrets.SLACK_PRIVATE_HOOK_URL_2 }}
      SMTP_PASSWORD: ${{ secrets.GMAIL_PASSWORD }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
      WISTIA_USERNAME: ${{ secrets.WISTIA_USERNAME }}
      WISTIA_PASSWORD: ${{ secrets.WISTIA_PASSWORD }}
      MEDIA_PATH: /tmp/screenshots
      DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
      DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
      SCREENSHOT_BUCKET: octopus-guides-screenshots
      DISPLAY: ":99.0"
      BROWSER_TYPE: FirefoxNoImplicitWaitNoProxy
      MOUSE_VERTICAL_OFFSET: 74
      MOUSE_VERTICAL_OFFSET_CHROME: 125
      CUCUMBER_TAGS: >-
        (not @browserspecific or @firefox) and
        (not @destinationspecific or @k8s) and
        (not @repositoryspecific or @dockerhub) and
        (not @applicationspecific or @java) and
        (not @sourcespecific or @git)
      DISABLE_HIGHLIGHTS: false
      DISABLE_SCREENSHOTS: false
      MOVE_TO_MOUSE_CUSROR: false
      DISABLE_VIDEO: true
      STHREE_SCREENSHOT_ENABLED: true
      GIT_URL: https://github.com/OctopusSamples/RandomQuotes-Java.git
      SCREENSHOT_PATH: /java-app/k8s/dockerhub/git/
      DOCKER_IMAGE: octopussamples/randomquotesjava
      OCTOPUS_DOCKER_IMAGE: octopussamples/randomquotesjava
      CONFIG_FILE: "spring:\\n  profiles:\\n    active: \\\"#{Octopus.Environment.Name}\\\"\\n  h2:\\n    console:\\n      enabled: true\\n  jpa:\\n    database-platform: org.hibernate.dialect.H2Dialect\\n  datasource:\\n    url: jdbc:h2:mem:testdb\\n    dbcp2:\\n      driver-class-name: org.h2.Driver\\n  flyway:\\n    locations: classpath:db/migration/{vendor}\\nserver:\\n  port : \\\"80\\\""
      CONFIG_FILE_MOUNT_PATH: "/app/docker-application.yml"
      CONFIG_FILE_NAME: "docker-application.yml"
      CREATE_RELEASE_SHELL_LOCATOR: "(//div[@class='CodeMirror'])[1]"
      DOCKER_PORT: 80
      K8S_DEV_NODEPORT: 30000
      K8S_TEST_NODEPORT: 30001
      K8S_PROD_NODEPORT: 30002
    steps:
      - uses: actions/checkout@v2


      - name: Get workflow ID
        id: workflow-id
        run: ./scripts/linux/get-workflow-id.sh

      - name: Print Workflow ID
        run: echo "Workflow ID is ${{ steps.workflow-id.outputs.WORKFLOW_ID }}"

      - name: Disk usage
        run: ./scripts/linux/disk-usage.sh

      - name: Install Puppet
        run: >-
          ./install.sh utilities.pp headless.pp jenkins.pp minikube.pp mssql-cleanstart.pp octopus.pp dotnetutilities.pp
          octopuscli.pp jenkinsfinalize.pp

      - name: Wait for Octopus
        run: ./scripts/linux/wait-octopus.sh

      - name: Create Api Key
        run: ./scripts/linux/create-apikey.sh

      - name: Create Jenkins project
        run: ./scripts/linux/create-javak8s-jenkinsproject.sh

      - name: Create Worker
        run: sudo ./scripts/linux/create-worker.sh

      - name: Create environments
        run: ./scripts/linux/create-environments.sh

      - name: Create certificates
        run: ./scripts/linux/create-certificates.sh

      - name: Create target
        run: ./scripts/linux/create-k8starget-screenshots.sh

      - name: Create docker feed
        run: ./scripts/linux/create-dockerfeed.sh

      - name: Create project
        run: ./scripts/linux/create-k8sproject.sh

      - name: Open App in Dev
        run: ./scripts/linux/open-devwebapp.sh

      - name: Create release
        run: ./scripts/linux/create-jenkinscreatereleaseplugin.sh

      - name: Create Lifecycle
        run: ./scripts/linux/create-lifecycle.sh

      - name: Open App in Test
        run: ./scripts/linux/open-testwebapp.sh

      - name: Add Manual Intervention
        run: ./scripts/linux/add-manualintervention.sh

      - name: Add Notification
        run: ./scripts/linux/add-notification.sh

      - name: Upload screenshots
        run: ./scripts/linux/upload-screenshots.sh

      - name: Restarts the scheduled run when it failed
        if: github.event_name == 'schedule' && failure()
        run: >-
          if [[ -n "${{ steps.workflow-id.outputs.WORKFLOW_ID }}" ]]; then
          curl -i
          -X POST
          -H "Accept: application/vnd.github.v3+json"
          -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}"
          https://api.github.com/repos/OctopusDeploy/OctopusGuides/actions/workflows/${{ steps.workflow-id.outputs.WORKFLOW_ID }}/dispatches
          -d '{"ref": "${{ github.ref }}" }';
          fi